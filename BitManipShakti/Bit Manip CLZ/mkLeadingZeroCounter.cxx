/*
 * Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
 * 
 * On Wed May 23 15:04:10 GMT 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkLeadingZeroCounter.h"


/* Constructor */
MOD_mkLeadingZeroCounter::MOD_mkLeadingZeroCounter(tSimStateHdl simHdl,
						   char const *name,
						   Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_count(simHdl, "count", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_rg_rs1(simHdl, "rg_rs1", this, 8u),
    PORT_RST_N((tUInt8)1u)
{
  PORT_EN_load_rs1 = false;
  PORT_EN_increment_count = false;
  PORT_EN_leftshift_rs1 = false;
  PORT_load_rs1_newval = 0u;
  PORT_leftshift_rs1_shiftvalue = 0u;
  PORT_read_rs1 = false;
  PORT_RDY_read_rs1 = false;
  PORT_RDY_load_rs1 = false;
  PORT_read_count = 0u;
  PORT_RDY_read_count = false;
  PORT_RDY_increment_count = false;
  PORT_read_rs1value = 0u;
  PORT_RDY_read_rs1value = false;
  PORT_RDY_leftshift_rs1 = false;
  symbol_count = 25u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkLeadingZeroCounter::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_increment_count", SYM_DEF, &DEF_CAN_FIRE_increment_count, 1u);
  init_symbol(&symbols[1u], "CAN_FIRE_leftshift_rs1", SYM_DEF, &DEF_CAN_FIRE_leftshift_rs1, 1u);
  init_symbol(&symbols[2u], "CAN_FIRE_load_rs1", SYM_DEF, &DEF_CAN_FIRE_load_rs1, 1u);
  init_symbol(&symbols[3u], "CAN_FIRE_read_count", SYM_DEF, &DEF_CAN_FIRE_read_count, 1u);
  init_symbol(&symbols[4u], "CAN_FIRE_read_rs1", SYM_DEF, &DEF_CAN_FIRE_read_rs1, 1u);
  init_symbol(&symbols[5u], "CAN_FIRE_read_rs1value", SYM_DEF, &DEF_CAN_FIRE_read_rs1value, 1u);
  init_symbol(&symbols[6u], "count", SYM_MODULE, &INST_count);
  init_symbol(&symbols[7u], "EN_increment_count", SYM_PORT, &PORT_EN_increment_count, 1u);
  init_symbol(&symbols[8u], "EN_leftshift_rs1", SYM_PORT, &PORT_EN_leftshift_rs1, 1u);
  init_symbol(&symbols[9u], "EN_load_rs1", SYM_PORT, &PORT_EN_load_rs1, 1u);
  init_symbol(&symbols[10u],
	      "leftshift_rs1_shiftvalue",
	      SYM_PORT,
	      &PORT_leftshift_rs1_shiftvalue,
	      8u);
  init_symbol(&symbols[11u], "load_rs1_newval", SYM_PORT, &PORT_load_rs1_newval, 8u);
  init_symbol(&symbols[12u], "RDY_increment_count", SYM_PORT, &PORT_RDY_increment_count, 1u);
  init_symbol(&symbols[13u], "RDY_leftshift_rs1", SYM_PORT, &PORT_RDY_leftshift_rs1, 1u);
  init_symbol(&symbols[14u], "RDY_load_rs1", SYM_PORT, &PORT_RDY_load_rs1, 1u);
  init_symbol(&symbols[15u], "RDY_read_count", SYM_PORT, &PORT_RDY_read_count, 1u);
  init_symbol(&symbols[16u], "RDY_read_rs1", SYM_PORT, &PORT_RDY_read_rs1, 1u);
  init_symbol(&symbols[17u], "RDY_read_rs1value", SYM_PORT, &PORT_RDY_read_rs1value, 1u);
  init_symbol(&symbols[18u], "read_count", SYM_PORT, &PORT_read_count, 8u);
  init_symbol(&symbols[19u], "read_rs1", SYM_PORT, &PORT_read_rs1, 1u);
  init_symbol(&symbols[20u], "read_rs1value", SYM_PORT, &PORT_read_rs1value, 8u);
  init_symbol(&symbols[21u], "rg_rs1", SYM_MODULE, &INST_rg_rs1);
  init_symbol(&symbols[22u],
	      "WILL_FIRE_increment_count",
	      SYM_DEF,
	      &DEF_WILL_FIRE_increment_count,
	      1u);
  init_symbol(&symbols[23u], "WILL_FIRE_leftshift_rs1", SYM_DEF, &DEF_WILL_FIRE_leftshift_rs1, 1u);
  init_symbol(&symbols[24u], "WILL_FIRE_load_rs1", SYM_DEF, &DEF_WILL_FIRE_load_rs1, 1u);
}


/* Rule actions */


/* Methods */

tUInt8 MOD_mkLeadingZeroCounter::METH_read_rs1()
{
  DEF_rg_rs1__h139 = INST_rg_rs1.METH_read();
  PORT_read_rs1 = (tUInt8)(DEF_rg_rs1__h139 >> 7u);
  return PORT_read_rs1;
}

tUInt8 MOD_mkLeadingZeroCounter::METH_RDY_read_rs1()
{
  DEF_CAN_FIRE_read_rs1 = (tUInt8)1u;
  PORT_RDY_read_rs1 = DEF_CAN_FIRE_read_rs1;
  return PORT_RDY_read_rs1;
}

void MOD_mkLeadingZeroCounter::METH_load_rs1(tUInt8 ARG_load_rs1_newval)
{
  PORT_EN_load_rs1 = (tUInt8)1u;
  DEF_WILL_FIRE_load_rs1 = (tUInt8)1u;
  PORT_load_rs1_newval = ARG_load_rs1_newval;
  INST_rg_rs1.METH_write(ARG_load_rs1_newval);
}

tUInt8 MOD_mkLeadingZeroCounter::METH_RDY_load_rs1()
{
  DEF_CAN_FIRE_load_rs1 = (tUInt8)1u;
  PORT_RDY_load_rs1 = DEF_CAN_FIRE_load_rs1;
  return PORT_RDY_load_rs1;
}

tUInt8 MOD_mkLeadingZeroCounter::METH_read_count()
{
  DEF__read__h77 = INST_count.METH_read();
  PORT_read_count = DEF__read__h77;
  return PORT_read_count;
}

tUInt8 MOD_mkLeadingZeroCounter::METH_RDY_read_count()
{
  DEF_CAN_FIRE_read_count = (tUInt8)1u;
  PORT_RDY_read_count = DEF_CAN_FIRE_read_count;
  return PORT_RDY_read_count;
}

void MOD_mkLeadingZeroCounter::METH_increment_count()
{
  tUInt8 DEF_x__h167;
  PORT_EN_increment_count = (tUInt8)1u;
  DEF_WILL_FIRE_increment_count = (tUInt8)1u;
  DEF__read__h77 = INST_count.METH_read();
  DEF_x__h167 = (tUInt8)255u & (DEF__read__h77 + (tUInt8)1u);
  INST_count.METH_write(DEF_x__h167);
}

tUInt8 MOD_mkLeadingZeroCounter::METH_RDY_increment_count()
{
  DEF_CAN_FIRE_increment_count = (tUInt8)1u;
  PORT_RDY_increment_count = DEF_CAN_FIRE_increment_count;
  return PORT_RDY_increment_count;
}

tUInt8 MOD_mkLeadingZeroCounter::METH_read_rs1value()
{
  DEF_rg_rs1__h139 = INST_rg_rs1.METH_read();
  PORT_read_rs1value = DEF_rg_rs1__h139;
  return PORT_read_rs1value;
}

tUInt8 MOD_mkLeadingZeroCounter::METH_RDY_read_rs1value()
{
  DEF_CAN_FIRE_read_rs1value = (tUInt8)1u;
  PORT_RDY_read_rs1value = DEF_CAN_FIRE_read_rs1value;
  return PORT_RDY_read_rs1value;
}

void MOD_mkLeadingZeroCounter::METH_leftshift_rs1(tUInt8 ARG_leftshift_rs1_shiftvalue)
{
  tUInt8 DEF_x__h181;
  PORT_EN_leftshift_rs1 = (tUInt8)1u;
  DEF_WILL_FIRE_leftshift_rs1 = (tUInt8)1u;
  PORT_leftshift_rs1_shiftvalue = ARG_leftshift_rs1_shiftvalue;
  DEF_rg_rs1__h139 = INST_rg_rs1.METH_read();
  DEF_x__h181 = primShiftL8(8u,
			    8u,
			    (tUInt8)(DEF_rg_rs1__h139),
			    8u,
			    (tUInt8)(ARG_leftshift_rs1_shiftvalue));
  INST_rg_rs1.METH_write(DEF_x__h181);
}

tUInt8 MOD_mkLeadingZeroCounter::METH_RDY_leftshift_rs1()
{
  DEF_CAN_FIRE_leftshift_rs1 = (tUInt8)1u;
  PORT_RDY_leftshift_rs1 = DEF_CAN_FIRE_leftshift_rs1;
  return PORT_RDY_leftshift_rs1;
}


/* Reset routines */

void MOD_mkLeadingZeroCounter::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_count.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkLeadingZeroCounter::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkLeadingZeroCounter::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_count.dump_state(indent + 2u);
  INST_rg_rs1.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkLeadingZeroCounter::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 28u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_increment_count", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_leftshift_rs1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_load_rs1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_read_count", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_read_rs1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_read_rs1value", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_increment_count", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_leftshift_rs1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_load_rs1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h77", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "rg_rs1__h139", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_increment_count", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_leftshift_rs1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_load_rs1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_increment_count", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_leftshift_rs1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_load_rs1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_read_count", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_read_rs1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_read_rs1value", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "leftshift_rs1_shiftvalue", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "load_rs1_newval", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "read_count", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "read_rs1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "read_rs1value", 8u);
  num = INST_count.dump_VCD_defs(num);
  num = INST_rg_rs1.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkLeadingZeroCounter::dump_VCD(tVCDDumpType dt,
					unsigned int levels,
					MOD_mkLeadingZeroCounter &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkLeadingZeroCounter::vcd_defs(tVCDDumpType dt, MOD_mkLeadingZeroCounter &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 8u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_increment_count) != DEF_CAN_FIRE_increment_count)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_increment_count, 1u);
	backing.DEF_CAN_FIRE_increment_count = DEF_CAN_FIRE_increment_count;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_leftshift_rs1) != DEF_CAN_FIRE_leftshift_rs1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_leftshift_rs1, 1u);
	backing.DEF_CAN_FIRE_leftshift_rs1 = DEF_CAN_FIRE_leftshift_rs1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_load_rs1) != DEF_CAN_FIRE_load_rs1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_load_rs1, 1u);
	backing.DEF_CAN_FIRE_load_rs1 = DEF_CAN_FIRE_load_rs1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_read_count) != DEF_CAN_FIRE_read_count)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_read_count, 1u);
	backing.DEF_CAN_FIRE_read_count = DEF_CAN_FIRE_read_count;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_read_rs1) != DEF_CAN_FIRE_read_rs1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_read_rs1, 1u);
	backing.DEF_CAN_FIRE_read_rs1 = DEF_CAN_FIRE_read_rs1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_read_rs1value) != DEF_CAN_FIRE_read_rs1value)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_read_rs1value, 1u);
	backing.DEF_CAN_FIRE_read_rs1value = DEF_CAN_FIRE_read_rs1value;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_increment_count) != DEF_WILL_FIRE_increment_count)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_increment_count, 1u);
	backing.DEF_WILL_FIRE_increment_count = DEF_WILL_FIRE_increment_count;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_leftshift_rs1) != DEF_WILL_FIRE_leftshift_rs1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_leftshift_rs1, 1u);
	backing.DEF_WILL_FIRE_leftshift_rs1 = DEF_WILL_FIRE_leftshift_rs1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_load_rs1) != DEF_WILL_FIRE_load_rs1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_load_rs1, 1u);
	backing.DEF_WILL_FIRE_load_rs1 = DEF_WILL_FIRE_load_rs1;
      }
      ++num;
      if ((backing.DEF__read__h77) != DEF__read__h77)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h77, 8u);
	backing.DEF__read__h77 = DEF__read__h77;
      }
      ++num;
      if ((backing.DEF_rg_rs1__h139) != DEF_rg_rs1__h139)
      {
	vcd_write_val(sim_hdl, num, DEF_rg_rs1__h139, 8u);
	backing.DEF_rg_rs1__h139 = DEF_rg_rs1__h139;
      }
      ++num;
      if ((backing.PORT_EN_increment_count) != PORT_EN_increment_count)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_increment_count, 1u);
	backing.PORT_EN_increment_count = PORT_EN_increment_count;
      }
      ++num;
      if ((backing.PORT_EN_leftshift_rs1) != PORT_EN_leftshift_rs1)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_leftshift_rs1, 1u);
	backing.PORT_EN_leftshift_rs1 = PORT_EN_leftshift_rs1;
      }
      ++num;
      if ((backing.PORT_EN_load_rs1) != PORT_EN_load_rs1)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_load_rs1, 1u);
	backing.PORT_EN_load_rs1 = PORT_EN_load_rs1;
      }
      ++num;
      if ((backing.PORT_RDY_increment_count) != PORT_RDY_increment_count)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_increment_count, 1u);
	backing.PORT_RDY_increment_count = PORT_RDY_increment_count;
      }
      ++num;
      if ((backing.PORT_RDY_leftshift_rs1) != PORT_RDY_leftshift_rs1)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_leftshift_rs1, 1u);
	backing.PORT_RDY_leftshift_rs1 = PORT_RDY_leftshift_rs1;
      }
      ++num;
      if ((backing.PORT_RDY_load_rs1) != PORT_RDY_load_rs1)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_load_rs1, 1u);
	backing.PORT_RDY_load_rs1 = PORT_RDY_load_rs1;
      }
      ++num;
      if ((backing.PORT_RDY_read_count) != PORT_RDY_read_count)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_read_count, 1u);
	backing.PORT_RDY_read_count = PORT_RDY_read_count;
      }
      ++num;
      if ((backing.PORT_RDY_read_rs1) != PORT_RDY_read_rs1)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_read_rs1, 1u);
	backing.PORT_RDY_read_rs1 = PORT_RDY_read_rs1;
      }
      ++num;
      if ((backing.PORT_RDY_read_rs1value) != PORT_RDY_read_rs1value)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_read_rs1value, 1u);
	backing.PORT_RDY_read_rs1value = PORT_RDY_read_rs1value;
      }
      ++num;
      if ((backing.PORT_leftshift_rs1_shiftvalue) != PORT_leftshift_rs1_shiftvalue)
      {
	vcd_write_val(sim_hdl, num, PORT_leftshift_rs1_shiftvalue, 8u);
	backing.PORT_leftshift_rs1_shiftvalue = PORT_leftshift_rs1_shiftvalue;
      }
      ++num;
      if ((backing.PORT_load_rs1_newval) != PORT_load_rs1_newval)
      {
	vcd_write_val(sim_hdl, num, PORT_load_rs1_newval, 8u);
	backing.PORT_load_rs1_newval = PORT_load_rs1_newval;
      }
      ++num;
      if ((backing.PORT_read_count) != PORT_read_count)
      {
	vcd_write_val(sim_hdl, num, PORT_read_count, 8u);
	backing.PORT_read_count = PORT_read_count;
      }
      ++num;
      if ((backing.PORT_read_rs1) != PORT_read_rs1)
      {
	vcd_write_val(sim_hdl, num, PORT_read_rs1, 1u);
	backing.PORT_read_rs1 = PORT_read_rs1;
      }
      ++num;
      if ((backing.PORT_read_rs1value) != PORT_read_rs1value)
      {
	vcd_write_val(sim_hdl, num, PORT_read_rs1value, 8u);
	backing.PORT_read_rs1value = PORT_read_rs1value;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_increment_count, 1u);
      backing.DEF_CAN_FIRE_increment_count = DEF_CAN_FIRE_increment_count;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_leftshift_rs1, 1u);
      backing.DEF_CAN_FIRE_leftshift_rs1 = DEF_CAN_FIRE_leftshift_rs1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_load_rs1, 1u);
      backing.DEF_CAN_FIRE_load_rs1 = DEF_CAN_FIRE_load_rs1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_read_count, 1u);
      backing.DEF_CAN_FIRE_read_count = DEF_CAN_FIRE_read_count;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_read_rs1, 1u);
      backing.DEF_CAN_FIRE_read_rs1 = DEF_CAN_FIRE_read_rs1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_read_rs1value, 1u);
      backing.DEF_CAN_FIRE_read_rs1value = DEF_CAN_FIRE_read_rs1value;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_increment_count, 1u);
      backing.DEF_WILL_FIRE_increment_count = DEF_WILL_FIRE_increment_count;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_leftshift_rs1, 1u);
      backing.DEF_WILL_FIRE_leftshift_rs1 = DEF_WILL_FIRE_leftshift_rs1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_load_rs1, 1u);
      backing.DEF_WILL_FIRE_load_rs1 = DEF_WILL_FIRE_load_rs1;
      vcd_write_val(sim_hdl, num++, DEF__read__h77, 8u);
      backing.DEF__read__h77 = DEF__read__h77;
      vcd_write_val(sim_hdl, num++, DEF_rg_rs1__h139, 8u);
      backing.DEF_rg_rs1__h139 = DEF_rg_rs1__h139;
      vcd_write_val(sim_hdl, num++, PORT_EN_increment_count, 1u);
      backing.PORT_EN_increment_count = PORT_EN_increment_count;
      vcd_write_val(sim_hdl, num++, PORT_EN_leftshift_rs1, 1u);
      backing.PORT_EN_leftshift_rs1 = PORT_EN_leftshift_rs1;
      vcd_write_val(sim_hdl, num++, PORT_EN_load_rs1, 1u);
      backing.PORT_EN_load_rs1 = PORT_EN_load_rs1;
      vcd_write_val(sim_hdl, num++, PORT_RDY_increment_count, 1u);
      backing.PORT_RDY_increment_count = PORT_RDY_increment_count;
      vcd_write_val(sim_hdl, num++, PORT_RDY_leftshift_rs1, 1u);
      backing.PORT_RDY_leftshift_rs1 = PORT_RDY_leftshift_rs1;
      vcd_write_val(sim_hdl, num++, PORT_RDY_load_rs1, 1u);
      backing.PORT_RDY_load_rs1 = PORT_RDY_load_rs1;
      vcd_write_val(sim_hdl, num++, PORT_RDY_read_count, 1u);
      backing.PORT_RDY_read_count = PORT_RDY_read_count;
      vcd_write_val(sim_hdl, num++, PORT_RDY_read_rs1, 1u);
      backing.PORT_RDY_read_rs1 = PORT_RDY_read_rs1;
      vcd_write_val(sim_hdl, num++, PORT_RDY_read_rs1value, 1u);
      backing.PORT_RDY_read_rs1value = PORT_RDY_read_rs1value;
      vcd_write_val(sim_hdl, num++, PORT_leftshift_rs1_shiftvalue, 8u);
      backing.PORT_leftshift_rs1_shiftvalue = PORT_leftshift_rs1_shiftvalue;
      vcd_write_val(sim_hdl, num++, PORT_load_rs1_newval, 8u);
      backing.PORT_load_rs1_newval = PORT_load_rs1_newval;
      vcd_write_val(sim_hdl, num++, PORT_read_count, 8u);
      backing.PORT_read_count = PORT_read_count;
      vcd_write_val(sim_hdl, num++, PORT_read_rs1, 1u);
      backing.PORT_read_rs1 = PORT_read_rs1;
      vcd_write_val(sim_hdl, num++, PORT_read_rs1value, 8u);
      backing.PORT_read_rs1value = PORT_read_rs1value;
    }
}

void MOD_mkLeadingZeroCounter::vcd_prims(tVCDDumpType dt, MOD_mkLeadingZeroCounter &backing)
{
  INST_count.dump_VCD(dt, backing.INST_count);
  INST_rg_rs1.dump_VCD(dt, backing.INST_rg_rs1);
}
