/*
 * Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
 * 
 * On Wed May 23 15:04:10 GMT 2018
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkLeadingZeroCounter_h__
#define __mkLeadingZeroCounter_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkLeadingZeroCounter module */
class MOD_mkLeadingZeroCounter : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt8> INST_count;
  MOD_Reg<tUInt8> INST_rg_rs1;
 
 /* Constructor */
 public:
  MOD_mkLeadingZeroCounter(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_EN_load_rs1;
  tUInt8 PORT_EN_increment_count;
  tUInt8 PORT_EN_leftshift_rs1;
  tUInt8 PORT_load_rs1_newval;
  tUInt8 PORT_leftshift_rs1_shiftvalue;
  tUInt8 PORT_read_rs1;
  tUInt8 PORT_RDY_read_rs1;
  tUInt8 PORT_RDY_load_rs1;
  tUInt8 PORT_read_count;
  tUInt8 PORT_RDY_read_count;
  tUInt8 PORT_RDY_increment_count;
  tUInt8 PORT_read_rs1value;
  tUInt8 PORT_RDY_read_rs1value;
  tUInt8 PORT_RDY_leftshift_rs1;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_leftshift_rs1;
  tUInt8 DEF_WILL_FIRE_increment_count;
  tUInt8 DEF_WILL_FIRE_load_rs1;
  tUInt8 DEF_CAN_FIRE_leftshift_rs1;
  tUInt8 DEF_CAN_FIRE_read_rs1value;
  tUInt8 DEF_CAN_FIRE_increment_count;
  tUInt8 DEF_CAN_FIRE_read_count;
  tUInt8 DEF_CAN_FIRE_load_rs1;
  tUInt8 DEF_CAN_FIRE_read_rs1;
 
 /* Local definitions */
 private:
  tUInt8 DEF__read__h77;
  tUInt8 DEF_rg_rs1__h139;
 
 /* Rules */
 public:
 
 /* Methods */
 public:
  tUInt8 METH_read_rs1();
  tUInt8 METH_RDY_read_rs1();
  void METH_load_rs1(tUInt8 ARG_load_rs1_newval);
  tUInt8 METH_RDY_load_rs1();
  tUInt8 METH_read_count();
  tUInt8 METH_RDY_read_count();
  void METH_increment_count();
  tUInt8 METH_RDY_increment_count();
  tUInt8 METH_read_rs1value();
  tUInt8 METH_RDY_read_rs1value();
  void METH_leftshift_rs1(tUInt8 ARG_leftshift_rs1_shiftvalue);
  tUInt8 METH_RDY_leftshift_rs1();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkLeadingZeroCounter &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkLeadingZeroCounter &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkLeadingZeroCounter &backing);
};

#endif /* ifndef __mkLeadingZeroCounter_h__ */
