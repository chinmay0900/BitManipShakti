/*
 * Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
 * 
 * On Wed May 23 11:02:03 GMT 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkCounter.h"


/* Constructor */
MOD_mkCounter::MOD_mkCounter(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_value(simHdl, "value", this, 8u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  PORT_EN_load = false;
  PORT_EN_increment = false;
  PORT_load_newval = 0u;
  PORT_read = 0u;
  PORT_RDY_read = false;
  PORT_RDY_load = false;
  PORT_RDY_increment = false;
  symbol_count = 13u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkCounter::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_increment", SYM_DEF, &DEF_CAN_FIRE_increment, 1u);
  init_symbol(&symbols[1u], "CAN_FIRE_load", SYM_DEF, &DEF_CAN_FIRE_load, 1u);
  init_symbol(&symbols[2u], "CAN_FIRE_read", SYM_DEF, &DEF_CAN_FIRE_read, 1u);
  init_symbol(&symbols[3u], "EN_increment", SYM_PORT, &PORT_EN_increment, 1u);
  init_symbol(&symbols[4u], "EN_load", SYM_PORT, &PORT_EN_load, 1u);
  init_symbol(&symbols[5u], "load_newval", SYM_PORT, &PORT_load_newval, 8u);
  init_symbol(&symbols[6u], "RDY_increment", SYM_PORT, &PORT_RDY_increment, 1u);
  init_symbol(&symbols[7u], "RDY_load", SYM_PORT, &PORT_RDY_load, 1u);
  init_symbol(&symbols[8u], "RDY_read", SYM_PORT, &PORT_RDY_read, 1u);
  init_symbol(&symbols[9u], "read", SYM_PORT, &PORT_read, 8u);
  init_symbol(&symbols[10u], "value", SYM_MODULE, &INST_value);
  init_symbol(&symbols[11u], "WILL_FIRE_increment", SYM_DEF, &DEF_WILL_FIRE_increment, 1u);
  init_symbol(&symbols[12u], "WILL_FIRE_load", SYM_DEF, &DEF_WILL_FIRE_load, 1u);
}


/* Rule actions */


/* Methods */

tUInt8 MOD_mkCounter::METH_read()
{
  DEF__read__h46 = INST_value.METH_read();
  PORT_read = DEF__read__h46;
  return PORT_read;
}

tUInt8 MOD_mkCounter::METH_RDY_read()
{
  DEF_CAN_FIRE_read = (tUInt8)1u;
  PORT_RDY_read = DEF_CAN_FIRE_read;
  return PORT_RDY_read;
}

void MOD_mkCounter::METH_load(tUInt8 ARG_load_newval)
{
  PORT_EN_load = (tUInt8)1u;
  DEF_WILL_FIRE_load = (tUInt8)1u;
  PORT_load_newval = ARG_load_newval;
  INST_value.METH_write(ARG_load_newval);
}

tUInt8 MOD_mkCounter::METH_RDY_load()
{
  DEF_CAN_FIRE_load = (tUInt8)1u;
  PORT_RDY_load = DEF_CAN_FIRE_load;
  return PORT_RDY_load;
}

void MOD_mkCounter::METH_increment()
{
  tUInt8 DEF_x__h87;
  PORT_EN_increment = (tUInt8)1u;
  DEF_WILL_FIRE_increment = (tUInt8)1u;
  DEF__read__h46 = INST_value.METH_read();
  DEF_x__h87 = (tUInt8)255u & (DEF__read__h46 + (tUInt8)1u);
  INST_value.METH_write(DEF_x__h87);
}

tUInt8 MOD_mkCounter::METH_RDY_increment()
{
  DEF_CAN_FIRE_increment = (tUInt8)1u;
  PORT_RDY_increment = DEF_CAN_FIRE_increment;
  return PORT_RDY_increment;
}


/* Reset routines */

void MOD_mkCounter::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_value.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkCounter::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkCounter::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_value.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkCounter::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 15u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_increment", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_load", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_read", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_increment", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_load", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h46", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_increment", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_load", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_increment", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_load", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_read", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "load_newval", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "read", 8u);
  num = INST_value.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkCounter::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkCounter &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkCounter::vcd_defs(tVCDDumpType dt, MOD_mkCounter &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_increment) != DEF_CAN_FIRE_increment)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_increment, 1u);
	backing.DEF_CAN_FIRE_increment = DEF_CAN_FIRE_increment;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_load) != DEF_CAN_FIRE_load)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_load, 1u);
	backing.DEF_CAN_FIRE_load = DEF_CAN_FIRE_load;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_read) != DEF_CAN_FIRE_read)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_read, 1u);
	backing.DEF_CAN_FIRE_read = DEF_CAN_FIRE_read;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_increment) != DEF_WILL_FIRE_increment)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_increment, 1u);
	backing.DEF_WILL_FIRE_increment = DEF_WILL_FIRE_increment;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_load) != DEF_WILL_FIRE_load)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_load, 1u);
	backing.DEF_WILL_FIRE_load = DEF_WILL_FIRE_load;
      }
      ++num;
      if ((backing.DEF__read__h46) != DEF__read__h46)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h46, 8u);
	backing.DEF__read__h46 = DEF__read__h46;
      }
      ++num;
      if ((backing.PORT_EN_increment) != PORT_EN_increment)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_increment, 1u);
	backing.PORT_EN_increment = PORT_EN_increment;
      }
      ++num;
      if ((backing.PORT_EN_load) != PORT_EN_load)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_load, 1u);
	backing.PORT_EN_load = PORT_EN_load;
      }
      ++num;
      if ((backing.PORT_RDY_increment) != PORT_RDY_increment)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_increment, 1u);
	backing.PORT_RDY_increment = PORT_RDY_increment;
      }
      ++num;
      if ((backing.PORT_RDY_load) != PORT_RDY_load)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_load, 1u);
	backing.PORT_RDY_load = PORT_RDY_load;
      }
      ++num;
      if ((backing.PORT_RDY_read) != PORT_RDY_read)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_read, 1u);
	backing.PORT_RDY_read = PORT_RDY_read;
      }
      ++num;
      if ((backing.PORT_load_newval) != PORT_load_newval)
      {
	vcd_write_val(sim_hdl, num, PORT_load_newval, 8u);
	backing.PORT_load_newval = PORT_load_newval;
      }
      ++num;
      if ((backing.PORT_read) != PORT_read)
      {
	vcd_write_val(sim_hdl, num, PORT_read, 8u);
	backing.PORT_read = PORT_read;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_increment, 1u);
      backing.DEF_CAN_FIRE_increment = DEF_CAN_FIRE_increment;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_load, 1u);
      backing.DEF_CAN_FIRE_load = DEF_CAN_FIRE_load;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_read, 1u);
      backing.DEF_CAN_FIRE_read = DEF_CAN_FIRE_read;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_increment, 1u);
      backing.DEF_WILL_FIRE_increment = DEF_WILL_FIRE_increment;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_load, 1u);
      backing.DEF_WILL_FIRE_load = DEF_WILL_FIRE_load;
      vcd_write_val(sim_hdl, num++, DEF__read__h46, 8u);
      backing.DEF__read__h46 = DEF__read__h46;
      vcd_write_val(sim_hdl, num++, PORT_EN_increment, 1u);
      backing.PORT_EN_increment = PORT_EN_increment;
      vcd_write_val(sim_hdl, num++, PORT_EN_load, 1u);
      backing.PORT_EN_load = PORT_EN_load;
      vcd_write_val(sim_hdl, num++, PORT_RDY_increment, 1u);
      backing.PORT_RDY_increment = PORT_RDY_increment;
      vcd_write_val(sim_hdl, num++, PORT_RDY_load, 1u);
      backing.PORT_RDY_load = PORT_RDY_load;
      vcd_write_val(sim_hdl, num++, PORT_RDY_read, 1u);
      backing.PORT_RDY_read = PORT_RDY_read;
      vcd_write_val(sim_hdl, num++, PORT_load_newval, 8u);
      backing.PORT_load_newval = PORT_load_newval;
      vcd_write_val(sim_hdl, num++, PORT_read, 8u);
      backing.PORT_read = PORT_read;
    }
}

void MOD_mkCounter::vcd_prims(tVCDDumpType dt, MOD_mkCounter &backing)
{
  INST_value.dump_VCD(dt, backing.INST_value);
}
